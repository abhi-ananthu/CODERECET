// Assuming this file is, for example, in src/controllers/chatController.js
// And basic-session-functions.js is in src/utils/session.js

// Import necessary functions from your session management script
const { addToHistory, getSession, connectDb } = require('../utils/session');

// Import your agent and tool functions (as provided in your snippet)
const { invokeAgent } = require('../utils/discordAgent');
const { generateStructuredResponse } = require('../utils/mapwithTools');
// const { v4: uuid } = require('uuid'); // No longer needed if addToHistory generates it

// IMPORTANT: Ensure connectDb() is called once when your Node.js application starts up.
// For example, in your main server.js file:
// async function startServer() {
//     await connectDb(); // Establish MongoDB connection
//     // ... start your Express server
// }
// startServer();

/**
 * Handles generating an AI response and maintaining chat history.
 * It uses the addToHistory function to either create a new session
 * or append messages to an existing session's history.
 *
 * @param {object} req - Express request object. Expected query params: 'prompt', 'sessionId' (optional).
 * @param {object} res - Express response object.
 */
const generateResponse = async (req, res) => {
  const { prompt, sessionId } = req.query; // sessionId can be passed from the client

  if (!prompt) {
    return res.status(400).json({ error: 'Prompt is required' });
  }

  let currentSessionId = sessionId; // Use the provided sessionId, or it will be generated by addToHistory

  try {
    // 1. Add the user's prompt to the chat history.
    // This function will automatically create a new session if currentSessionId is null/undefined
    // or if no session with that ID exists. Otherwise, it updates the existing one.
    // It returns the actual sessionId used/created.
    currentSessionId = await addToHistory(currentSessionId, {
      role: 'user',
      content: prompt,
      timestamp: new Date(),
    });
    console.log(`User prompt added to session: ${currentSessionId}`);

    // 2. Invoke the AI agent with the determined sessionId and prompt.
    // The invokeAgent function should use this sessionId to maintain context.
    const aiResponseContent = await invokeAgent(currentSessionId, prompt);

    // 3. Add the AI's response to the same chat history.
    await addToHistory(currentSessionId, {
      role: 'ai',
      content: aiResponseContent,
      timestamp: new Date(),
    });
    console.log(`AI response added to session: ${currentSessionId}`);

    // 4. Send the response back to the client, including the sessionId
    // so the client can send it back for subsequent messages in the same session.
    res
      .status(200)
      .json({ sessionId: currentSessionId, response: aiResponseContent });
  } catch (err) {
    console.error('Error in generateResponse:', err);
    res.status(500).json({
      error: 'Failed to generate AI response or manage session history',
      details: err.message,
    });
  }
};

/**
 * Builds a structured response based on the chat history of a given session.
 *
 * @param {object} req - Express request object. Expected body param: 'sessionId'.
 * @param {object} res - Express response object.
 */
const buildPs = async (req, res) => {
  const { sessionId } = req.query; // Assuming sessionId comes from the request body for this endpoint

  if (!sessionId) {
    return res
      .status(400)
      .json({ error: 'Session ID is required to build structured response' });
  }

  try {
    // 1. Retrieve the entire session document using the getSession function.
    const session = await getSession(sessionId);

    if (!session) {
      return res
        .status(404)
        .json({ error: 'Session not found for the provided ID.' });
    }

    // 2. Extract the chat history from the session document.
    // Ensure 'history' exists and is an array, default to empty array if not.
    const context = session.data.history || [];

    // 3. Generate a structured response using your generateStructuredResponse function.
    // This function will likely use the chat history (context) to inform its output.
    const structuredResponse = await generateStructuredResponse(context);

    console.log(structuredResponse);
    // 4. Send the structured response back to the client.
    res
      .status(200)
      .json({ sessionId: sessionId, structuredResponse: structuredResponse });
  } catch (err) {
    console.error('Error in buildPs:', err);
    res.status(500).json({
      error: 'Failed to build structured response',
      details: err.message,
    });
  }
};

// Export the functions for use in your Express routes
module.exports = { generateResponse, buildPs };
