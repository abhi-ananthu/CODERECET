// Assuming this file is, for example, in src/controllers/chatController.js
// And basic-session-functions.js is in src/utils/session.js

// Import necessary functions from your session management script
const { addToHistory, getSession, connectDb } = require('../utils/session');

// Import your agent and tool functions (as provided in your snippet)
const { invokeAgent } = require('../utils/discordAgent');
const { generateStructuredResponse } = require('../utils/mapwithTools');
// const { v4: uuid } = require('uuid'); // No longer needed if addToHistory generates it

// IMPORTANT: Ensure connectDb() is called once when your Node.js application starts up.
// For example, in your main server.js file:
// async function startServer() {
//     await connectDb(); // Establish MongoDB connection
//     // ... start your Express server
// }
// startServer();

/**
 * Handles generating an AI response and maintaining chat history.
 * It uses the addToHistory function to either create a new session
 * or append messages to an existing session's history.
 *
 * @param {object} req - Express request object. Expected query params: 'prompt', 'sessionId' (optional).
 * @param {object} res - Express response object.
 */
const generateResponse = async (req, res) => {
  const { prompt, sessionId } = req.query; // sessionId can be passed from the client

  if (!prompt) {
    return res.status(400).json({ error: 'Prompt is required' });
  }

  let currentSessionId = sessionId; // Use the provided sessionId, or it will be generated by addToHistory

  try {
    // 1. Add the user's prompt to the chat history.
    // This function will automatically create a new session if currentSessionId is null/undefined
    // or if no session with that ID exists. Otherwise, it updates the existing one.
    // It returns the actual sessionId used/created.
    currentSessionId = await addToHistory(currentSessionId, {
      role: 'user',
      content: prompt,
      timestamp: new Date(),
    });
    console.log(`User prompt added to session: ${currentSessionId}`);

    // 2. Invoke the AI agent with the determined sessionId and prompt.
    // The invokeAgent function should use this sessionId to maintain context.
    const aiResponseContent = await invokeAgent(currentSessionId, prompt);

    // 3. Add the AI's response to the same chat history.
    await addToHistory(currentSessionId, {
      role: 'ai',
      content: aiResponseContent,
      timestamp: new Date(),
    });
    console.log(`AI response added to session: ${currentSessionId}`);

    // Send the user's current message to the model.
    const result = await chat.sendMessage({ message: input });

    // After the message is sent and a response is received,
    // update the chatHistories Map with the latest history from the chat session.
    // chat.getHistory() returns the full conversation history including the latest turn.
    chatHistories.set(userId, chat.getHistory());

    // Send the model's response back to the client.
    return res.send(result.text);
  } catch (error) {
    console.error('Error in botModel:', error); // Log the error for debugging
    return res
      .status(500)
      .send('An error occurred while processing your request.');
  }
};

module.exports = { botModel };
